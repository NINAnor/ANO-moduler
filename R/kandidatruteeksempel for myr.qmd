---
title: "Kandidatrute-eksempel for myr"
format: html
editor: visual
---

```{r setup}
#| message: false
#| 

library(tidyverse)
library(sf)
library(gridExtra)
library(ggspatial)
```

Read SSB 550x500m grid dataset

```{r readBig}
#| eval: false
#grid <- sf::read_sf("../data/SSB0500M_L/ruter500m_Norge.shp",
#                    quiet = T)
grid <- sf::read_sf("/data/P-Prosjekter2/412421_okologisk_tilstand_2024/Data/SSB0500M_L/ruter500m_Norge.shp",
  quiet = T
)

# subset vestfold
#grid_vf <- grid |>
#  filter(Fylk2016 == "07")

# subset sør trondelag
grid_tr <- grid |>
  filter(Fylk2016 == "16" | Fylk2016 == "17")

# read AR5
ar5_tr <- read_sf("/data/R/GeoSpatialData/Topography/Norway_FKB/Original/FKB-AR5 FGDB-format/Basisdata_50_Trondelag_25832_FKB-AR5_FGDB.gdb") |>
  st_transform(32633) |>
  mutate(Arealtype = case_match(
    arealtype,
    "60" ~ "Myr",
    "12" ~ "Samferdsel",
    "21" ~ "Fulldyrka mark",
    "23" ~ "Innmarksbeite",
    "30" ~ "Barskog",
    "50" ~ "Åpen mark",
    "81" ~ "Ferskvann",
    .default = arealtype
  )) |>
  # Keep just the mire polygons
  filter(Arealtype == "Myr") |>
  #mutate(area = st_area(SHAPE)) |>
  sf::st_make_valid()

# intercept grid and mire
grid_ar5 <- grid_tr |>
  st_intersection(ar5_tr) |>
  mutate(area = st_area(geometry))

# get sum mire area per grid cell
stats <- grid_ar5 |>
  as_tibble() |>
  group_by(SSBid) |>
  summarise(myrareal = sum(area),
            n = n())

# summary(stats$myrareal)
# summary(stats$n)

# add total mire to grid cell geometry
grid_tr <- grid_tr |>
  left_join(stats)

# keep only grid cells with mire in them
# In the future we want to include the wetland model to this analysis, not just AR5
grid_tr <- grid_tr |>
  mutate(myrareal = units::drop_units(myrareal)) |>
  filter(myrareal > 0)

# sample 100 grid cells as candidate areas and save them
#grid_tr |>
#  slice_sample(n = 100) |>
#  saveRDS("/data/P-Prosjekter2/412421_okologisk_tilstand_2024/Data/kandidatruter_myr_trondelag.rds")

# get lenght of dataset
ln <- nrow(grid_tr)

# Select three example grid cells with varying mire area
three <- grid_tr |>
  arrange(myrareal) |>
  slice(1000, round(ln / 2), ln-500) |>
  pull(SSBid)

# get one example grid cell with high number of distinct mire polygins
dense <- grid_tr |>
  slice_max(n, n = 1) |>
    pull(SSBid)

get <- c(three, dense)
# filter mire polygons based on the example grid celles
ex_geom <- grid_ar5 |>
  filter(SSBid %in% get)

# check that selection is good
grid_tr |>
  filter(SSBid == three[1]) |>
  ggplot() +
  geom_sf()+
  geom_sf(data = ex_geom |> filter(SSBid == three[1]),
          aes(fill = Arealtype)) +
  coord_sf(datum = st_crs(32633))+
  guides(fill = "none")
# ok, probably but almost no mire

grid_tr |>
  filter(SSBid == three[2]) |>
  ggplot() +
  geom_sf()+
  geom_sf(data = ex_geom |> filter(SSBid == three[2]),
          aes(fill = Arealtype)) +
  coord_sf(datum = st_crs(32633))+
  guides(fill = "none")
# Some mire

grid_tr |>
  filter(SSBid == three[3]) |>
  ggplot() +
  geom_sf()+
  geom_sf(data = ex_geom |> filter(SSBid == three[3]),
          aes(fill = Arealtype)) +
  coord_sf(datum = st_crs(32633))+
  guides(fill = "none")
# A lot of mire

grid_tr |>
  filter(SSBid == dense) |>
  ggplot() +
  geom_sf()+
  geom_sf(data = ex_geom |> filter(SSBid == dense),
          aes(fill = Arealtype)) +
  coord_sf(datum = st_crs(32633))+
  guides(fill = "none")
# Many polygins often measn a weird edge error 

# save(three, dense, ex_geom, file = "../data/examplesTR.RData")
#grid_tr |>
#  saveRDS("/data/P-Prosjekter2/412421_okologisk_tilstand_2024/Data/grid_tr.rds")
```

```{r readCache}
load("../data/examplesTR.RData")
grid_tr <- readRDS("/data/P-Prosjekter2/412421_okologisk_tilstand_2024/Data/grid_tr.rds")
```

```{r plot}

# Plot and combine
pA <- grid_tr |>
  filter(SSBid == three[1]) |>
  ggplot() +
  geom_sf()+
  geom_sf(data = ex_geom |> filter(SSBid == three[1]),
          aes(fill = Arealtype)) +
  coord_sf(datum = st_crs(32633))+
  guides(fill = "none")

pB <- grid_tr |>
  filter(SSBid == three[2]) |>
  ggplot() +
  geom_sf()+
  geom_sf(data = ex_geom |> filter(SSBid == three[2]),
          aes(fill = Arealtype))+
  coord_sf(datum = st_crs(32633))+
  guides(fill = "none")


pC <- grid_tr |>
  filter(SSBid == three[3]) |>
  ggplot() +
  geom_sf()+
  geom_sf(data = ex_geom |> filter(SSBid == three[3]),
          aes(fill = Arealtype))+
  coord_sf(datum = st_crs(32633))+
  guides(fill = "none")

pD <- grid_tr |>
  filter(SSBid == dense) |>
  ggplot() +
  geom_sf()+
  geom_sf(data = ex_geom |> filter(SSBid == dense),
          aes(fill = Arealtype))+
  coord_sf(datum = st_crs(32633))+
  guides(fill = "none")

grid.arrange(pB,pC, pD, nrow = 1)
```

## Adding points

We can add sampling points in a few different ways. Either complete systematically spread across the grid cell, after which we can filter out those who don't land in mires. Or we can stratify and force the same number of points into mire polygons. Or we can spread the points systematically, but reather densly, across the grid cell, and select randomly *n* of those that fall inside the mire polygons. This last option has the advantage that we can easily control the minimum spacing between points. But the approach is less suited for very small occurrences that fall between even the dense sample of points.

I tried this using st_sample below, but I cant seem to to fix and centre the points, and they shift arond a bit with each iteration.

```{r}
# systematically spread, 36 points
pointsB <- grid_tr |>
  filter(SSBid == three[2]) |>
  st_sample(size = 46,
            type = "hexagonal",
            exact = T)

pointsC <- grid_tr |>
  filter(SSBid == three[3]) |>
  st_sample(size = 46,
            type = "hexagonal",
            exact = T)

pointsD <- grid_tr |>
  filter(SSBid == dense) |>
  st_sample(size = 46,
            type = "hexagonal",
            exact = T)

pB_2 <- pB + geom_sf(data = pointsB)
pC_2 <- pC + geom_sf(data = pointsC)
pD_2 <- pD + geom_sf(data = pointsD)
grid.arrange(pB_2,pC_2,pD_2, nrow = 1)
```

Instead I will use st_grid.

```{r}
pointsB <- grid_tr |>
  filter(SSBid == three[2]) |>
  st_make_grid(n = c(6,6)) |>
  st_as_sf() |>
  add_column(label = seq(1,36,1))


```

Then we get the centroids.

The order of prioritisation (oop):

```{r}
id <- c(1,3,5,
         13, 15, 17,
         25, 27, 29,
         8, 10, 12,
         20, 22, 24,
         32, 34, 36,
         2, 4, 6,
         14, 16, 18,
         26, 28, 30,
         7, 9, 11,
         19, 21, 23,
         31, 33, 35)

oop_link <- tibble(id, oop = seq(1,36,1))
```

```{r}
center <- st_coordinates(st_centroid(st_geometry(pointsB)))

(numbered_grid <-  pointsB |>
  left_join(oop_link, by = join_by(label == id)) |>
  ggplot()+
  geom_sf()+
  geom_text(aes(x = center[,1], y = center[,2]-20, label = paste("ID", label))) +
  geom_text(aes(x = center[,1], y = center[,2]+20, label = oop)) +
  coord_sf(datum = st_crs(32633))+
  labs(x = "", y = ""))+
  theme(axis.text = element_blank())

ggsave("../img/gridID.png")
```

```{r}

pointsB2 <- pointsB |>
  st_centroid()

(pointed_grid <- grid_tr |>
  filter(SSBid == three[2])   |>
  ggplot()+
  geom_sf() +
  geom_sf(data = pointsB2)+
  coord_sf(datum = st_crs(32633))+
  labs(x = "", y = ""))


```

This layout is similar to ANO, but there only every second points is included.

```{r}
pointsC <- grid_tr |>
  filter(SSBid == three[3]) |>
  st_make_grid(n = c(6,6)) |>
  st_as_sf() |>
  add_column(label = seq(1,36,1)) |>
  st_centroid()
pointsD <- grid_tr |>
  filter(SSBid == dense) |>
  st_make_grid(n = c(6,6)) |>
  st_as_sf() |>
  add_column(label = seq(1,36,1)) |>
  st_centroid()

pBp <- pB + geom_sf(data = pointsB2)
pCp <- pC + geom_sf(data = pointsC)
pDp <- pD + geom_sf(data = pointsD)


grid.arrange(pBp,pCp,pDp, nrow = 1)
```

Now I select max 3 point per grid cell and that fall inside a selected nature type, based on the oop. Lets assume all the mire is of a selected type i this case.

```{r}
# adding oop
pointsB2 <- pointsB2 |>
  left_join(oop_link, by = join_by(label == id))
pointsC <- pointsC |>
  left_join(oop_link, by = join_by(label == id))
pointsD <- pointsD |>
  left_join(oop_link, by = join_by(label == id))

```

```{r}

smallMire <- ex_geom |> 
  filter(SSBid == three[2]) 
bigMire <- ex_geom |> 
  filter(SSBid == three[3]) 
denseMire <- ex_geom |> 
  filter(SSBid == dense) 

pointsBi <- st_as_sf(pointsB2) |>
  st_filter(smallMire) |>
  arrange(oop) |>
  slice_head(n = 3)

pointsCi <- st_as_sf(pointsC) |>
  st_filter(bigMire)|>
  arrange(oop) |>
  slice_head(n = 3)

pointsDi <- st_as_sf(pointsD) |>
  st_filter(denseMire) |>
  arrange(oop) |>
  slice_head(n = 3)

pB_2 <- pB + 
  geom_sf(data = pointsB2, pch = 3) +
  geom_sf(
    data = pointsBi,
    pch = 1,
    size = 3
  )+
  coord_sf(datum = st_crs(32633))+
  theme(axis.text.x = element_text(angle = 90))

pC_2 <- pC + geom_sf(
  data = pointsC,
  pch = 3
) +
  geom_sf(
    data = pointsCi,
    pch = 1,
    size = 3
  )+
  coord_sf(datum = st_crs(32633))+
  theme(axis.text.x = element_text(angle = 90))

pD_2 <- pD + geom_sf(
  data = pointsD,
  pch = 3
) +
  geom_sf(
    data = pointsDi,
    pch = 1,
    size = 3
  )+
  coord_sf(datum = st_crs(32633))+
  theme(axis.text.x = element_text(angle = 90)) +

  ggspatial::annotation_scale(
    pad_x = unit(.5, "cm"),
    pad_y = unit(0.7, "cm"),
    location = "tr",
    bar_cols = c("grey60", "white"),
    text_family = "ArcherPro Book"
  ) +
  ggspatial::annotation_north_arrow(
    location = "tr", which_north = "grid",
    height = unit(1.2, "cm"),
    width = unit(1, "cm"),
    pad_x = unit(0.2, "in"), pad_y = unit(0.5, "in"),
    style = ggspatial::north_arrow_orienteering()
  )

(ggout <- grid.arrange(pB_2,pC_2,pD_2, nrow = 1))
ggsave("../img/mire_points_examples.png", ggout)
```

What is the distance between the points?

```{r}
max(st_distance(st_centroid(pointsB[1:2,])))
```
