---
title: "Kandidatrute-eksempel for myr"
format: html
editor: visual
---

```{r setup}
#| message: false
#| 

library(tidyverse)
library(sf)
library(gridExtra)

```

Read SSB 550x500m grid dataset

```{r readBig}
#| eval: false
#grid <- sf::read_sf("../data/SSB0500M_L/ruter500m_Norge.shp",
#                    quiet = T)

grid <- sf::read_sf("/data/P-Prosjekter2/412421_okologisk_tilstand_2024/Data/SSB0500M_L/ruter500m_Norge.shp",
                    quiet = T)

# subset vestfold
grid_vf <- grid |>
  filter(Fylk2016 == "07")

# read AR5
ar5_vf <- read_sf("/data/R/GeoSpatialData/Topography/Norway_FKB/Original/Basisdata_39_Vestfold_25832_FKB-AR5_FGDB.gdb") |>
  st_transform(32633) |>
  mutate(Arealtype = case_match(
    arealtype,
    "60" ~ "Myr",
    "12" ~ "Samferdsel",
    "21" ~ "Fulldyrka mark",
    "23" ~ "Innmarksbeite",
    "30" ~ "Barskog",
    "50" ~ "Ã…pen mark",
    "81" ~ "Ferskvann",
    .default = arealtype
  ))

# Keep just the mire polygons
ar5_vf_myr <- ar5_vf |>
  filter(Arealtype == "Myr") |>
  mutate(area = st_area(SHAPE)) |>
  sf::st_make_valid()

# intercept grid and mire
grid_ar5 <- grid_vf |>
  st_intersection(ar5_vf_myr)

# get sum mire area per grid cell
stats <- grid_ar5 |>
  as_tibble() |>
  group_by(SSBid) |>
  summarise(myrareal = sum(area))

#summary(stats$myrareal)

# add total mire to grid cell geometry
grid_vf_stat <- grid_vf |>
  left_join(stats)

# keep only grid cells with mire in them
grid_vf_myr <- grid_vf_stat |>
  mutate(myrareal = units::drop_units(myrareal)) |>
  filter(myrareal >0)

# get lenght of dataset
ln <- nrow(grid_vf_myr)

# Select three example grid cells
three <- grid_vf_myr |>
  arrange(myrareal) |>
  slice(1, round(ln/2), ln ) |>
  pull(SSBid)

# filter mire polygons based on the three exmaple grid celles
three_geom <- grid_ar5 |>
  filter(SSBid %in% three)

save(grid_vf_myr, three, three_geom, file = "../data/examplesVF.RData")
```

```{r readCache}
load("../data/examplesVF.RData")

```

```{r plot}

# Plot and combine
pA <- grid_vf_myr |>
  filter(SSBid == three[1]) |>
  ggplot() +
  geom_sf()+
  geom_sf(data = three_geom |> filter(SSBid == three[1]),
          aes(fill = Arealtype)) +
  coord_sf(datum = st_crs(32633))+
  guides(fill = "none")

pB <- grid_vf_myr |>
  filter(SSBid == three[2]) |>
  ggplot() +
  geom_sf()+
  geom_sf(data = three_geom |> filter(SSBid == three[2]),
          aes(fill = Arealtype))+
  coord_sf(datum = st_crs(32633))+
  guides(fill = "none")

pC <- grid_vf_myr |>
  filter(SSBid == three[3]) |>
  ggplot() +
  geom_sf()+
  geom_sf(data = three_geom |> filter(SSBid == three[3]),
          aes(fill = Arealtype))+
  coord_sf(datum = st_crs(32633))+
  guides(fill = "none")

grid.arrange(pB,pC, nrow = 1)
```

## Adding points

Whe can add sampling points in q few different ways. Either complete systematically spread across the grid cell, after which we can filter out those who don't land in mires. Or we can stratify and force the same number of points into mire polygons. Or we can spread the points systematically, but reather densly, across the grid cell, and select randomly *n* of those that fall inside the mire polygons. This last option has the advantage that we can control the minimum spacing between points. But the approach is less suited for very samll occurences that fall between even the dense sample of points.

```{r}
# systematically spread, 36 points
pointsB <- grid_vf_myr |>
  filter(SSBid == three[2]) |>
  st_sample(size = 46,
            type = "hexagonal",
            exact = T)

pointsC <- grid_vf_myr |>
  filter(SSBid == three[3]) |>
  st_sample(size = 46,
            type = "hexagonal",
            exact = T)

pB_2 <- pB + geom_sf(data = pointsB)
pC_2 <- pC + geom_sf(data = pointsC)
grid.arrange(pB_2,pC_2, nrow = 1)
```

Don't know how to get these centred inthe grid cell, but that's not so important yet.

Now I select max 3 point per grid cell and that fall inside a polygon.

```{r}

smallMire <- three_geom |> 
  filter(SSBid == three[2]) 
bigMire <- three_geom |> 
  filter(SSBid == three[3]) 


pointsBi <- st_as_sf(pointsB) |>
  st_filter(smallMire)

pointsCi <- st_as_sf(pointsC) |>
  st_filter(bigMire) |>
  slice_sample(n = 3)

pB_2 <- pB + geom_sf(
  data = pointsB,
  pch = 3
) +
  geom_sf(
    data = pointsBi,
    pch = 1
  )

pC_2 <- pC + geom_sf(
  data = pointsC,
  pch = 3
) +
  geom_sf(
    data = pointsCi,
    pch = 1
  )
grid.arrange(pB_2,pC_2, nrow = 1)
```
